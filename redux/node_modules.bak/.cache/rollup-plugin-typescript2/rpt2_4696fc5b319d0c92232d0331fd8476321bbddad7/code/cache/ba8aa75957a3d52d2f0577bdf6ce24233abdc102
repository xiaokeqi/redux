{"code":"export default function compose(...funcs) {\r\n    if (funcs.length === 0) {\r\n        // infer the argument type so it is usable in inference down the line\r\n        return (arg) => arg;\r\n    }\r\n    if (funcs.length === 1) {\r\n        return funcs[0];\r\n    }\r\n    return funcs.reduce((a, b) => (...args) => a(b(...args)));\r\n}\r\n//# sourceMappingURL=compose.js.map","references":[],"map":"{\"version\":3,\"file\":\"compose.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/compose.ts\"],\"names\":[],\"mappings\":\"AA6CA,MAAM,CAAC,OAAO,UAAU,OAAO,CAAC,GAAG,KAAiB;IAClD,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QACtB,qEAAqE;QACrE,OAAO,CAAI,GAAM,EAAE,EAAE,CAAC,GAAG,CAAA;KAC1B;IAED,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QACtB,OAAO,KAAK,CAAC,CAAC,CAAC,CAAA;KAChB;IAED,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,IAAS,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;AAChE,CAAC\"}","dts":{"name":"/Users/lidandan/beike/demo/redux/types/compose.d.ts","writeByteOrderMark":false,"text":"declare type Func<T extends any[], R> = (...a: T) => R;\r\n/**\r\n * Composes single-argument functions from right to left. The rightmost\r\n * function can take multiple arguments as it provides the signature for the\r\n * resulting composite function.\r\n *\r\n * @param funcs The functions to compose.\r\n * @returns A function obtained by composing the argument functions from right\r\n *   to left. For example, `compose(f, g, h)` is identical to doing\r\n *   `(...args) => f(g(h(...args)))`.\r\n */\r\nexport default function compose(): <R>(a: R) => R;\r\nexport default function compose<F extends Function>(f: F): F;\r\nexport default function compose<A, T extends any[], R>(f1: (a: A) => R, f2: Func<T, A>): Func<T, R>;\r\nexport default function compose<A, B, T extends any[], R>(f1: (b: B) => R, f2: (a: A) => B, f3: Func<T, A>): Func<T, R>;\r\nexport default function compose<A, B, C, T extends any[], R>(f1: (c: C) => R, f2: (b: B) => C, f3: (a: A) => B, f4: Func<T, A>): Func<T, R>;\r\nexport default function compose<R>(f1: (a: any) => R, ...funcs: Function[]): (...args: any[]) => R;\r\nexport default function compose<R>(...funcs: Function[]): (...args: any[]) => R;\r\nexport {};\r\n"}}
