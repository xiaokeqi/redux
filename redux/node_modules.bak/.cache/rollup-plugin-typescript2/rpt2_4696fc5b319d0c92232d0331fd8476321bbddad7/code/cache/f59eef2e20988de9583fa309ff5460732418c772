{"code":"import compose from './compose';\r\nexport default function applyMiddleware(...middlewares) {\r\n    return (createStore) => (reducer, ...args) => {\r\n        const store = createStore(reducer, ...args);\r\n        let dispatch = () => {\r\n            throw new Error('Dispatching while constructing your middleware is not allowed. ' +\r\n                'Other middleware would not be applied to this dispatch.');\r\n        };\r\n        const middlewareAPI = {\r\n            getState: store.getState,\r\n            dispatch: (action, ...args) => dispatch(action, ...args)\r\n        };\r\n        const chain = middlewares.map(middleware => middleware(middlewareAPI));\r\n        dispatch = compose(...chain)(store.dispatch);\r\n        return {\r\n            ...store,\r\n            dispatch\r\n        };\r\n    };\r\n}\r\n//# sourceMappingURL=applyMiddleware.js.map","references":["/Users/lidandan/beike/demo/redux/src/compose.ts","/Users/lidandan/beike/demo/redux/src/types/middleware.ts","/Users/lidandan/beike/demo/redux/src/types/actions.ts","/Users/lidandan/beike/demo/redux/src/types/store.ts","/Users/lidandan/beike/demo/redux/src/types/reducers.ts"],"map":"{\"version\":3,\"file\":\"applyMiddleware.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/applyMiddleware.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,OAAO,MAAM,WAAW,CAAA;AAsD/B,MAAM,CAAC,OAAO,UAAU,eAAe,CACrC,GAAG,WAAyB;IAE5B,OAAO,CAAC,WAAyB,EAAE,EAAE,CAAC,CACpC,OAAsB,EACtB,GAAG,IAAW,EACd,EAAE;QACF,MAAM,KAAK,GAAG,WAAW,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAA;QAC3C,IAAI,QAAQ,GAAa,GAAG,EAAE;YAC5B,MAAM,IAAI,KAAK,CACb,iEAAiE;gBAC/D,yDAAyD,CAC5D,CAAA;QACH,CAAC,CAAA;QAED,MAAM,aAAa,GAAkB;YACnC,QAAQ,EAAE,KAAK,CAAC,QAAQ;YACxB,QAAQ,EAAE,CAAC,MAAM,EAAE,GAAG,IAAI,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC;SACzD,CAAA;QACD,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC,CAAA;QACtE,QAAQ,GAAG,OAAO,CAAkB,GAAG,KAAK,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;QAE7D,OAAO;YACL,GAAG,KAAK;YACR,QAAQ;SACT,CAAA;IACH,CAAC,CAAA;AACH,CAAC\"}","dts":{"name":"/Users/lidandan/beike/demo/redux/types/applyMiddleware.d.ts","writeByteOrderMark":false,"text":"import { Middleware } from './types/middleware';\r\nimport { StoreEnhancer } from './types/store';\r\n/**\r\n * Creates a store enhancer that applies middleware to the dispatch method\r\n * of the Redux store. This is handy for a variety of tasks, such as expressing\r\n * asynchronous actions in a concise manner, or logging every action payload.\r\n *\r\n * See `redux-thunk` package as an example of the Redux middleware.\r\n *\r\n * Because middleware is potentially asynchronous, this should be the first\r\n * store enhancer in the composition chain.\r\n *\r\n * Note that each middleware will be given the `dispatch` and `getState` functions\r\n * as named arguments.\r\n *\r\n * @param middlewares The middleware chain to be applied.\r\n * @returns A store enhancer applying the middleware.\r\n *\r\n * @template Ext Dispatch signature added by a middleware.\r\n * @template S The type of the state supported by a middleware.\r\n */\r\nexport default function applyMiddleware(): StoreEnhancer;\r\nexport default function applyMiddleware<Ext1, S>(middleware1: Middleware<Ext1, S, any>): StoreEnhancer<{\r\n    dispatch: Ext1;\r\n}>;\r\nexport default function applyMiddleware<Ext1, Ext2, S>(middleware1: Middleware<Ext1, S, any>, middleware2: Middleware<Ext2, S, any>): StoreEnhancer<{\r\n    dispatch: Ext1 & Ext2;\r\n}>;\r\nexport default function applyMiddleware<Ext1, Ext2, Ext3, S>(middleware1: Middleware<Ext1, S, any>, middleware2: Middleware<Ext2, S, any>, middleware3: Middleware<Ext3, S, any>): StoreEnhancer<{\r\n    dispatch: Ext1 & Ext2 & Ext3;\r\n}>;\r\nexport default function applyMiddleware<Ext1, Ext2, Ext3, Ext4, S>(middleware1: Middleware<Ext1, S, any>, middleware2: Middleware<Ext2, S, any>, middleware3: Middleware<Ext3, S, any>, middleware4: Middleware<Ext4, S, any>): StoreEnhancer<{\r\n    dispatch: Ext1 & Ext2 & Ext3 & Ext4;\r\n}>;\r\nexport default function applyMiddleware<Ext1, Ext2, Ext3, Ext4, Ext5, S>(middleware1: Middleware<Ext1, S, any>, middleware2: Middleware<Ext2, S, any>, middleware3: Middleware<Ext3, S, any>, middleware4: Middleware<Ext4, S, any>, middleware5: Middleware<Ext5, S, any>): StoreEnhancer<{\r\n    dispatch: Ext1 & Ext2 & Ext3 & Ext4 & Ext5;\r\n}>;\r\nexport default function applyMiddleware<Ext, S = any>(...middlewares: Middleware<any, S, any>[]): StoreEnhancer<{\r\n    dispatch: Ext;\r\n}>;\r\n"}}
